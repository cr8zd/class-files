Microsoft (R) Macro Assembler Version 12.00.30501.0	    05/26/15 17:29:47
*Random Numbers Sort    (Prog5_Randoms.asm		     Page 1 - 1


				TITLE Random Numbers Sort    (Prog5_Randoms.asm)

				; Author: Jennifer Frase (frasej)
				; Course / Project ID CS271-400  Program 5        Date: 5/24/15
				; Description: This program will ask the user for a number between 10 and 200.
				;              It will then generate that many random numbers between 100 and
				;              999 and store then in an array. The numbers will be displayed
				;              unsorted to the user before they are sorted in descending order.
				;			   After being sorted, the median value as well as the sorted
				;              array will be displayed to the user.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000A			MIN = 10
 = 000000C8			MAX = 200
 = 00000064			LO = 100
 = 000003E7			HI = 999



 00000000			.data
 00000000 00000000			requested		DWORD	?
 00000004  000000C8 [			generated		DWORD	MAX DUP(?)
	    00000000
	   ]

				;prompts
 00000324 57 68 65 6E 20		intro1			BYTE	"When you give me a number between 10 and 200, I will generate that many random", 0
	   79 6F 75 20 67
	   69 76 65 20 6D
	   65 20 61 20 6E
	   75 6D 62 65 72
	   20 62 65 74 77
	   65 65 6E 20 31
	   30 20 61 6E 64
	   20 32 30 30 2C
	   20 49 20 77 69
	   6C 6C 20 67 65
	   6E 65 72 61 74
	   65 20 74 68 61
	   74 20 6D 61 6E
	   79 20 72 61 6E
	   64 6F 6D 00
 00000373 6E 75 6D 62 65		intro2			BYTE	"numbers from 100 to 999. I will then show you them unsorted and sorted, as well", 0 
	   72 73 20 66 72
	   6F 6D 20 31 30
	   30 20 74 6F 20
	   39 39 39 2E 20
	   49 20 77 69 6C
	   6C 20 74 68 65
	   6E 20 73 68 6F
	   77 20 79 6F 75
	   20 74 68 65 6D
	   20 75 6E 73 6F
	   72 74 65 64 20
	   61 6E 64 20 73
	   6F 72 74 65 64
	   2C 20 61 73 20
	   77 65 6C 6C 00
 000003C3 61 73 20 64 69		intro3			BYTE	"as display the median.", 0
	   73 70 6C 61 79
	   20 74 68 65 20
	   6D 65 64 69 61
	   6E 2E 00
 000003DA 48 6F 77 20 6D		promptNums		BYTE	"How many random numbers should be generated? [10-200]", 0
	   61 6E 79 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 20 73
	   68 6F 75 6C 64
	   20 62 65 20 67
	   65 6E 65 72 61
	   74 65 64 3F 20
	   5B 31 30 2D 32
	   30 30 5D 00
 00000410 50 6C 65 61 73		warnRange		BYTE	"Please only give a number between 10 and 200 inclusive.", 0
	   65 20 6F 6E 6C
	   79 20 67 69 76
	   65 20 61 20 6E
	   75 6D 62 65 72
	   20 62 65 74 77
	   65 65 6E 20 31
	   30 20 61 6E 64
	   20 32 30 30 20
	   69 6E 63 6C 75
	   73 69 76 65 2E
	   00
 00000448 4D 79 20 6E 61		myName			BYTE	"My name is Jennifer Frase and this is Random Numbers Sort.", 0
	   6D 65 20 69 73
	   20 4A 65 6E 6E
	   69 66 65 72 20
	   46 72 61 73 65
	   20 61 6E 64 20
	   74 68 69 73 20
	   69 73 20 52 61
	   6E 64 6F 6D 20
	   4E 75 6D 62 65
	   72 73 20 53 6F
	   72 74 2E 00
					
				;results
 00000483 54 68 65 20 75		unsorted		BYTE	"The unsorted numbers are:", 0
	   6E 73 6F 72 74
	   65 64 20 6E 75
	   6D 62 65 72 73
	   20 61 72 65 3A
	   00
 0000049D 54 68 65 20 73		sorted			BYTE	"The sorted numbers are:", 0
	   6F 72 74 65 64
	   20 6E 75 6D 62
	   65 72 73 20 61
	   72 65 3A 00
 000004B5 54 68 65 20 6D		medText			BYTE	"The median is: ", 0
	   65 64 69 61 6E
	   20 69 73 3A 20
	   00




 00000000			.code
 00000000			main PROC

 00000000  E8 00000000 E		call		Randomize
					
				;introduction
 00000005  68 00000448 R		push	OFFSET myName
 0000000A  68 00000324 R		push	OFFSET intro1
 0000000F  68 00000373 R		push	OFFSET intro2
 00000014  68 000003C3 R		push	OFFSET intro3
 00000019  E8 0000007A			call	introduction

				;get user data
 0000001E  68 00000410 R		push	OFFSET warnRange
 00000023  68 000003DA R		push	OFFSET promptNums
 00000028  68 00000000 R		push	OFFSET requested
 0000002D  E8 000000AB			call	getData

				;fill the array
 00000032  68 00000004 R		push	OFFSET generated
 00000037  FF 35 00000000 R		push	requested
 0000003D  E8 000000D9			call	fill

				;display the unsorted list
 00000042  68 00000483 R		push	OFFSET unsorted
 00000047  68 00000004 R		push	OFFSET generated
 0000004C  FF 35 00000000 R		push	requested
 00000052  E8 00000180			call	displayList

				;sort the list
 00000057  68 00000004 R		push	OFFSET generated
 0000005C  FF 35 00000000 R		push	requested
 00000062  E8 000000D9			call	sort

				;display the median
 00000067  68 000004B5 R		push	OFFSET medText
 0000006C  68 00000004 R		push	OFFSET generated
 00000071  FF 35 00000000 R		push	requested
 00000077  E8 00000111			call	displayMed

				;display the list
 0000007C  68 0000049D R		push	OFFSET sorted
 00000081  68 00000004 R		push	OFFSET generated
 00000086  FF 35 00000000 R		push	requested
 0000008C  E8 00000146			call	displayList

					exit	; exit to operating system
 00000091  6A 00	   *	    push   +000000000h
 00000093  E8 00000000 E   *	    call   ExitProcess
 00000098			main ENDP




				;Procedure to introduce the user to the program
				;receives: references to the program title string and two discription strings
				;		   in ascending order on the stack 
				;returns: nothing
				;preconditions: none 
				;registers changed: edx
 00000098			introduction PROC
 00000098  55				push	ebp
 00000099  8B EC			mov		ebp, esp
 0000009B  8B 55 14			mov		edx, [ebp+20]			;myName
 0000009E  E8 00000000 E		call		WriteString
 000000A3  E8 00000000 E		call		CrLf
 000000A8  E8 00000000 E		call		CrLf

 000000AD  8B 55 10			mov		edx, [ebp+16]			;intro1
 000000B0  E8 00000000 E		call		WriteString
 000000B5  E8 00000000 E		call		CrLf

 000000BA  8B 55 0C			mov		edx, [ebp+12]			;intro2
 000000BD  E8 00000000 E		call		WriteString
 000000C2  E8 00000000 E		call		CrLf
					
 000000C7  8B 55 08			mov		edx, [ebp+8]			;intro3
 000000CA  E8 00000000 E		call		WriteString
 000000CF  E8 00000000 E		call		CrLf
 000000D4  E8 00000000 E		call		CrLf

 000000D9  5D				pop		ebp
 000000DA  C2 000C			ret		12
 000000DD			introduction ENDP




				;Procedure to get a number from the user between the constants MIN and MAX
				;receives: references to a number, a prompt string, a warning string
				;          in descending order on the stack
				;returns: a value between MIN and MAX in the passed variable
				;preconditions: none 
				;registers changed: edx, eax, ebx
 000000DD			getData PROC
 000000DD  55				push	ebp
 000000DE  8B EC			mov		ebp, esp
					
 000000E0				AskNum:								;ask for a valid number
 000000E0  8B 55 0C				mov		edx, [ebp+12]			;print prompt
 000000E3  E8 00000000 E			call		WriteString
 000000E8  E8 00000000 E			call		ReadInt
 000000ED  E8 00000000 E			call		CrLf
 000000F2  E8 00000000 E			call		CrLf

 000000F7  3D 000000C8			cmp		eax, MAX					;check that the number is valid
 000000FC  7F 05			jg		BadNum
 000000FE  83 F8 0A			cmp		eax, MIN
 00000101  7D 0F			jge		GoodNum

 00000103				BadNum:								;invalid # so get new number
 00000103  8B 55 10				mov		edx, [ebp+16]			;print warning message
 00000106  E8 00000000 E			call		WriteString
 0000010B  E8 00000000 E			call		CrLf
 00000110  EB CE				jmp		AskNum

 00000112				GoodNum:
 00000112  8B 5D 08				mov		ebx, [ebp+8]			;save value in passed variable
 00000115  89 03				mov		[ebx], eax
 00000117  5D				pop		ebp
 00000118  C2 000C			ret		12
 0000011B			getData ENDP




				;Procedure to introduce the user to the program
				;receives: a number as a value and an array reference in descending
				;          order on the stack
				;returns: the passed number of values between LO and HI stored
				;         in the array
				;preconditions: none 
				;registers changed: eax, ecx, edi
 0000011B			fill PROC
 0000011B  55				push	ebp
 0000011C  8B EC			mov		ebp, esp
 0000011E  8B 7D 0C			mov		edi, [ebp+12]		;array
 00000121  8B 4D 08			mov		ecx, [ebp+8]		;# of elements
						
 00000124				GetNum:						;loop through the array, filling with random number
 00000124  B8 000003E7				mov		eax, HI
 00000129  83 E8 64				sub		eax, LO
 0000012C  40					inc		eax
 0000012D  E8 00000000 E			call		RandomRange
 00000132  83 C0 64				add		eax, LO
 00000135  89 07				mov		[edi], eax
 00000137  83 C7 04				add		edi, 4
 0000013A  E2 E8				loop	GetNum

 0000013C  5D				pop		ebp
 0000013D  C2 0008			ret		8
 00000140			fill ENDP




				;Procedure to sort the given array from largest to smallest
				;		   using selection sort
				;receives: an array reference and the number of elements in that
				;          array as a value, in ascending order on the stack
				;returns: an array that is sorted in descending order
				;preconditions: none 
				;registers changed: ecx, ebx, eax, edx
 00000140			sort PROC
					LOCAL temp: DWORD
 00000140  55		   *	    push   ebp
 00000141  8B EC	   *	    mov    ebp, esp
 00000143  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000146  8B 4D 08			mov		ecx, [ebp+8]				;# elements in array
 00000149  8B 75 0C			mov		esi, [ebp+12]				;array
 0000014C  49				dec		ecx
 0000014D  BB 00000000			mov		ebx, 0						;index
					
 00000152				Order:								
 00000152  51					push	ecx						;set ecx counter for inner loop
 00000153  8B 4D 08				mov		ecx, [ebp+8]			;# of elements
 00000156  2B CB				sub		ecx, ebx
 00000158  49					dec		ecx						
 00000159  8B D3				mov		edx, ebx				;get starting index for inner loop
 0000015B  42					inc		edx
 0000015C  53					push	ebx						;save ebx, now used as maximum's index 
					
 0000015D					Find:
 0000015D  8B 04 96					mov		eax, [esi+4*edx]	;store the number being checked in temp
 00000160  89 45 FC					mov		temp, eax
 00000163  8B 04 9E					mov		eax, [esi+4*ebx]	;move the current maximum to eax
 00000166  39 45 FC					cmp		temp, eax			;compare current maximum to current index's value
 00000169  7C 02					jl		GreaterThan
 0000016B  8B DA					mov		ebx, edx			;if old max is smaller, then make max the current index
 0000016D						GreaterThan:
 0000016D  42							inc		edx				;increment edx to loop through all values
 0000016E  E2 ED					loop	Find
					
 00000170  8B CB				mov		ecx, ebx				;ecx is now the maximum's index
 00000172  5B					pop		ebx						;ebx is the index being swapped
 00000173  8B 04 9E				mov		eax, [esi+4*ebx]		;swap values
 00000176  89 45 FC				mov		temp, eax
 00000179  8B 04 8E				mov		eax, [esi+4*ecx]
 0000017C  89 04 9E				mov		[esi+4*ebx], eax
 0000017F  8B 45 FC				mov		eax, temp
 00000182  89 04 8E				mov		[esi+4*ecx], eax
 00000185  59					pop		ecx						;restore ecx and increment ebx to loop all index except last
 00000186  43					inc		ebx						
 00000187  E2 C9			loop	Order
					
 00000189  C9		   *	    leave  
 0000018A  C2 0008			ret		8
 0000018D			sort ENDP




				;Procedure find and display the median of the provided array
				;receives: a number as a value and an array reference in descending
				;          order on the stack
				;returns: nothing
				;preconditions: none 
				;registers changed: edx, eax, ebx
 0000018D			displayMed PROC
 0000018D  55				push	ebp
 0000018E  8B EC			mov		ebp, esp
 00000190  8B 55 10			mov		edx, [ebp+16]			;display median message
 00000193  E8 00000000 E		call		WriteString

 00000198  8B 45 08			mov		eax, [ebp+8]			;# of elements
 0000019B  8B 75 0C			mov		esi, [ebp+12]			;array
 0000019E  BA 00000000			mov		edx, 0					;calculate if number of elements is even
 000001A3  BB 00000002			mov		ebx, 2
 000001A8  F7 F3			div		ebx
 000001AA  83 FA 00			cmp		edx, 0
 000001AD  75 12			jne		One
					
 000001AF  8B 14 86			mov		edx, [esi+4*eax]		;number of elements is odd so find average
 000001B2  8B 44 86 FC			mov		eax, [esi-4+4*eax]
 000001B6  03 C2			add		eax, edx
 000001B8  BA 00000000			mov		edx, 0
 000001BD  F7 F3			div		ebx
 000001BF  EB 03			jmp		Done

 000001C1				One:
 000001C1  8B 04 86				mov		eax, [esi+4*eax]
						 
 000001C4				Done:							;write the median
 000001C4  E8 00000000 E			call		WriteDec
 000001C9  E8 00000000 E			call		CrLf
 000001CE  E8 00000000 E			call		CrLF
 000001D3  5D				pop		ebp
 000001D4  C2 0008			ret		8
 000001D7			displayMed ENDP




				;Procedure to display a given number of elements in a given array with
				;		   10 elements per line
				;receives: a number as a value, an array reference, and a reference
				;          to a string which is the title of the array in descending
				;		   order on the stack
				;returns: nothing
				;preconditions: none 
				;registers changed: edx, esi, ecx
 000001D7			displayList PROC
					LOCAL   count:DWORD
 000001D7  55		   *	    push   ebp
 000001D8  8B EC	   *	    mov    ebp, esp
 000001DA  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000001DD  C7 45 FC			mov		count, 0
	   00000000
 000001E4  8B 75 0C			mov		esi, [ebp+12]				;array
 000001E7  8B 4D 08			mov		ecx, [ebp+8]				;# of elements
 000001EA  8B 55 10			mov		edx, [ebp+16]				;print title
 000001ED  E8 00000000 E		call		WriteString
 000001F2  E8 00000000 E		call		CrLf
					
 000001F7				Display:
 000001F7  8B 06				mov		eax, [esi]
 000001F9  E8 00000000 E			call		WriteDec
 000001FE  B0 20				mov		al, ' '
 00000200  E8 00000000 E			call		WriteChar
 00000205  E8 00000000 E			call		WriteChar
 0000020A  E8 00000000 E			call		WriteChar
 0000020F  83 C6 04				add		esi, 4
 00000212  FF 45 FC				inc		count
 00000215  83 7D FC 0A				cmp		count, 10
 00000219  75 11				jne		SameLine
 0000021B  83 F9 01				cmp		ecx, 1
 0000021E  74 0C				je		SameLine
 00000220  E8 00000000 E			call		CrLf
 00000225  C7 45 FC				mov		count, 0	
	   00000000
 0000022C					SameLine:		
 0000022C  E2 C9				loop Display

 0000022E  E8 00000000 E		call		CrLf
 00000233  E8 00000000 E		call		CrLf
 00000238  C9		   *	    leave  
 00000239  C2 000C			ret		12
 0000023C			displayList ENDP

				END main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    05/26/15 17:29:47
*Random Numbers Sort    (Prog5_Randoms.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004C5 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000023C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayList  . . . . . . . . . .	P Near	 000001D7 _TEXT	Length= 00000065 Public STDCALL
  count  . . . . . . . . . . . .	DWord	 bp - 00000004
  Display  . . . . . . . . . . .	L Near	 000001F7 _TEXT	
  SameLine . . . . . . . . . . .	L Near	 0000022C _TEXT	
displayMed . . . . . . . . . . .	P Near	 0000018D _TEXT	Length= 0000004A Public STDCALL
  One  . . . . . . . . . . . . .	L Near	 000001C1 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 000001C4 _TEXT	
fill . . . . . . . . . . . . . .	P Near	 0000011B _TEXT	Length= 00000025 Public STDCALL
  GetNum . . . . . . . . . . . .	L Near	 00000124 _TEXT	
getData  . . . . . . . . . . . .	P Near	 000000DD _TEXT	Length= 0000003E Public STDCALL
  AskNum . . . . . . . . . . . .	L Near	 000000E0 _TEXT	
  BadNum . . . . . . . . . . . .	L Near	 00000103 _TEXT	
  GoodNum  . . . . . . . . . . .	L Near	 00000112 _TEXT	
introduction . . . . . . . . . .	P Near	 00000098 _TEXT	Length= 00000045 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000098 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sort . . . . . . . . . . . . . .	P Near	 00000140 _TEXT	Length= 0000004D Public STDCALL
  temp . . . . . . . . . . . . .	DWord	 bp - 00000004
  Order  . . . . . . . . . . . .	L Near	 00000152 _TEXT	
  Find . . . . . . . . . . . . .	L Near	 0000015D _TEXT	
  GreaterThan  . . . . . . . . .	L Near	 0000016D _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MAX  . . . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 0000000Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
generated  . . . . . . . . . . .	DWord	 00000004 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000324 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000373 _DATA	
intro3 . . . . . . . . . . . . .	Byte	 000003C3 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
medText  . . . . . . . . . . . .	Byte	 000004B5 _DATA	
myName . . . . . . . . . . . . .	Byte	 00000448 _DATA	
promptNums . . . . . . . . . . .	Byte	 000003DA _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
requested  . . . . . . . . . . .	DWord	 00000000 _DATA	
sorted . . . . . . . . . . . . .	Byte	 0000049D _DATA	
unsorted . . . . . . . . . . . .	Byte	 00000483 _DATA	
warnRange  . . . . . . . . . . .	Byte	 00000410 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
