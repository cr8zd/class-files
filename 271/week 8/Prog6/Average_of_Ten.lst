Microsoft (R) Macro Assembler Version 12.00.30501.0	    06/07/15 19:53:25
,Average of Ten    (Prog7_Average_of_Ten.asm		     Page 1 - 1


				TITLE Average of Ten    (Prog7_Average_of_Ten.asm)

				; Author: Jennifer Frase (frasej)
				; Course / Project ID CS271-400  Program 6        Date: 6/7/15
				; Description: This program will ask the user for 10 numbers (whose sum
				;              should fit in a 32 bit register), and then calculate the
				;              sum and average of those numbers. All reading and writing
				;              will be done with macros.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;Macro to get a string from the user
				;receives: the address of a string which will store the user's input, and then
				;		   the prompt that the user will read to decide what to input
				;returns: a string in the buffer varaible
				;preconditions: none
				;registers changed: none but edx and ecx are used and then restored
				getString MACRO buffer, prompt
					push			edx
					push			ecx
					displayString	prompt
					mov				edx, buffer
					mov				ecx, 20
					call				ReadString
					pop				ecx
					pop				edx
				ENDM


				;Macro to write a string for the user to see
				;receives: the address of a string which will be displayed
				;returns: nothing
				;preconditions: none
				;registers changed: none but edx is used and then restored
				displayString MACRO buffer
					push	edx
					mov		edx, buffer
					call		WriteString
					pop		edx
				ENDM



 00000000			.data
 00000000  0000000B [			stringNum		BYTE	11  DUP(?)
	    00
	   ]
 0000000B  0000000A [			numbers			DWORD	10	DUP(0)
	    00000000
	   ]

				;prompts
 00000033 50 6C 65 61 73		intro1			BYTE	"Please give 10 unsigned integers in decimal format, one at each prompt.", 0
	   65 20 67 69 76
	   65 20 31 30 20
	   75 6E 73 69 67
	   6E 65 64 20 69
	   6E 74 65 67 65
	   72 73 20 69 6E
	   20 64 65 63 69
	   6D 61 6C 20 66
	   6F 72 6D 61 74
	   2C 20 6F 6E 65
	   20 61 74 20 65
	   61 63 68 20 70
	   72 6F 6D 70 74
	   2E 00
 0000007B 4F 6E 63 65 20		intro2			BYTE	"Once 10 valid numbers are input, I will calculate the sum and the", 0 
	   31 30 20 76 61
	   6C 69 64 20 6E
	   75 6D 62 65 72
	   73 20 61 72 65
	   20 69 6E 70 75
	   74 2C 20 49 20
	   77 69 6C 6C 20
	   63 61 6C 63 75
	   6C 61 74 65 20
	   74 68 65 20 73
	   75 6D 20 61 6E
	   64 20 74 68 65
	   00
 000000BD 61 76 65 72 61		intro3			BYTE	"average of all the valid numbers you input.", 0
	   67 65 20 6F 66
	   20 61 6C 6C 20
	   74 68 65 20 76
	   61 6C 69 64 20
	   6E 75 6D 62 65
	   72 73 20 79 6F
	   75 20 69 6E 70
	   75 74 2E 00
 000000E9 50 6C 65 61 73		promptNums		BYTE	"Please give an unsigned decimal number: ", 0
	   65 20 67 69 76
	   65 20 61 6E 20
	   75 6E 73 69 67
	   6E 65 64 20 64
	   65 63 69 6D 61
	   6C 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000112 59 6F 75 20 64		warning			BYTE	"You did not give an unsigned integer.", 0
	   69 64 20 6E 6F
	   74 20 67 69 76
	   65 20 61 6E 20
	   75 6E 73 69 67
	   6E 65 64 20 69
	   6E 74 65 67 65
	   72 2E 00
 00000138 54 68 65 20 69		tooBig			BYTE	"The integer you gave was too big, please give smaller numbers.", 0
	   6E 74 65 67 65
	   72 20 79 6F 75
	   20 67 61 76 65
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2C 20 70
	   6C 65 61 73 65
	   20 67 69 76 65
	   20 73 6D 61 6C
	   6C 65 72 20 6E
	   75 6D 62 65 72
	   73 2E 00
 00000177 4D 79 20 6E 61		myName			BYTE	"My name is Jennifer Frase and this is Average of Ten.", 0
	   6D 65 20 69 73
	   20 4A 65 6E 6E
	   69 66 65 72 20
	   46 72 61 73 65
	   20 61 6E 64 20
	   74 68 69 73 20
	   69 73 20 41 76
	   65 72 61 67 65
	   20 6F 66 20 54
	   65 6E 2E 00
					
				;results
 000001AD 00000000			average			DWORD	0
 000001B1 00000000			sum				DWORD	0
 000001B5 54 68 65 20 73		sumString		BYTE	"The sum is: ", 0
	   75 6D 20 69 73
	   3A 20 00
 000001C2 54 68 65 20 61		aveString		BYTE	"The average is: ", 0
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 000001D3 59 6F 75 72 20		numDisplay		BYTE	"Your numbers are: ", 0
	   6E 75 6D 62 65
	   72 73 20 61 72
	   65 3A 20 00
 000001E6 2C 20 00			commas			BYTE	", ", 0




 00000000			.code
 00000000			main PROC

				;introduction
 00000000  68 00000177 R		push	OFFSET myName
 00000005  68 00000033 R		push	OFFSET intro1
 0000000A  68 0000007B R		push	OFFSET intro2
 0000000F  68 000000BD R		push	OFFSET intro3
 00000014  E8 000000EC			call	introduction


				;get user data
 00000019  B9 0000000A			mov		ecx, 10
					
					;get a number 10 times
 0000001E				getData:	
 0000001E  B8 0000000A				mov		eax, 10
 00000023  2B C1				sub		eax, ecx
 00000025  BB 00000004				mov		ebx, 4
 0000002A  F7 E3				mul		ebx

 0000002C  50					push	eax					;index to store number
 0000002D  68 00000112 R			push	OFFSET warning
 00000032  68 00000138 R			push	OFFSET tooBig
 00000037  68 000000E9 R			push	OFFSET promptNums
 0000003C  68 00000000 R			push	OFFSET stringNum
 00000041  68 0000000B R			push	OFFSET numbers
 00000046  E8 00000107				call	readVal
 0000004B  E2 D1			loop	getData

				;calculate
 0000004D  68 0000000B R		push	OFFSET	numbers
 00000052  68 000001B1 R		push	OFFSET	sum
 00000057  68 000001AD R		push	OFFSET	average
 0000005C  E8 00000181			call	calculate
					

				;write results
 00000061  E8 00000000 E		call			CrLf

					;display all 10 numbers
						displayString	OFFSET numDisplay
 00000066  52		     1		push	edx
 00000067  BA 000001D3 R     1		mov		edx, OFFSET numDisplay
 0000006C  E8 00000000 E     1		call		WriteString
 00000071  5A		     1		pop		edx
 00000072  E8 00000000 E			call			CrLf

 00000077  B9 0000000A				mov		ecx, 10
 0000007C					showNums:								;loop through the array and display each number
 0000007C  B8 0000000A					mov				eax, 10
 00000081  2B C1					sub				eax, ecx

 00000083  50						push			eax					;index from which to get number
 00000084  68 00000000 R				push			OFFSET stringNum
 00000089  68 0000000B R				push			OFFSET numbers
 0000008E  E8 00000182					call			writeVal
 00000093  83 F9 01					cmp				ecx, 1
 00000096  74 0C					je				NoComma
							displayString	OFFSET commas
 00000098  52		     1		push	edx
 00000099  BA 000001E6 R     1		mov		edx, OFFSET commas
 0000009E  E8 00000000 E     1		call		WriteString
 000000A3  5A		     1		pop		edx
 000000A4						NoComma:
 000000A4  E2 D6				loop			showNums
 000000A6  E8 00000000 E			call			CrLf
 000000AB  E8 00000000 E			call			CrLf
					
					;display the sum
						displayString	OFFSET sumString
 000000B0  52		     1		push	edx
 000000B1  BA 000001B5 R     1		mov		edx, OFFSET sumString
 000000B6  E8 00000000 E     1		call		WriteString
 000000BB  5A		     1		pop		edx
 000000BC  6A 00				push			0
 000000BE  68 00000000 R			push			OFFSET	stringNum
 000000C3  68 000001B1 R			push			OFFSET	sum
 000000C8  E8 00000148				call			writeVal
 000000CD  E8 00000000 E			call			CrLf
 000000D2  E8 00000000 E			call			CrLf

					;display the average
						displayString	OFFSET	aveString
 000000D7  52		     1		push	edx
 000000D8  BA 000001C2 R     1		mov		edx, OFFSET	aveString
 000000DD  E8 00000000 E     1		call		WriteString
 000000E2  5A		     1		pop		edx
 000000E3  6A 00				push			0
 000000E5  68 00000000 R			push			OFFSET	stringNum
 000000EA  68 000001AD R			push			OFFSET	average
 000000EF  E8 00000121				call			writeVal
 000000F4  E8 00000000 E			call			CrLf
 000000F9  E8 00000000 E			call			CrLf

					exit	; exit to operating system
 000000FE  6A 00	   *	    push   +000000000h
 00000100  E8 00000000 E   *	    call   ExitProcess
 00000105			main ENDP




				;Procedure to introduce the user to the program
				;receives: references to the program title string and two discription strings
				;		   in ascending order on the stack 
				;returns: nothing
				;preconditions: 
				;registers changed:
 00000105			introduction PROC
 00000105  55				push			ebp
 00000106  8B EC			mov				ebp, esp
					displayString	[ebp+20]			;myName
 00000108  52		     1		push	edx
 00000109  8B 55 14	     1		mov		edx, [ebp+20]
 0000010C  E8 00000000 E     1		call		WriteString
 00000111  5A		     1		pop		edx
 00000112  E8 00000000 E		call				CrLf
 00000117  E8 00000000 E		call				CrLf

					displayString	[ebp+16]			;intro1
 0000011C  52		     1		push	edx
 0000011D  8B 55 10	     1		mov		edx, [ebp+16]
 00000120  E8 00000000 E     1		call		WriteString
 00000125  5A		     1		pop		edx
 00000126  E8 00000000 E		call				CrLf

					displayString	[ebp+12]			;intro2
 0000012B  52		     1		push	edx
 0000012C  8B 55 0C	     1		mov		edx, [ebp+12]
 0000012F  E8 00000000 E     1		call		WriteString
 00000134  5A		     1		pop		edx
 00000135  E8 00000000 E		call				CrLf
					
					displayString	[ebp+8]			;intro3
 0000013A  52		     1		push	edx
 0000013B  8B 55 08	     1		mov		edx, [ebp+8]
 0000013E  E8 00000000 E     1		call		WriteString
 00000143  5A		     1		pop		edx
 00000144  E8 00000000 E		call				CrLf
 00000149  E8 00000000 E		call				CrLf

 0000014E  5D				pop		ebp
 0000014F  C2 000C			ret		12
 00000152			introduction ENDP




				;Procedure to get an integer from the user as a string. It will then validate
				;         that the integer is unsigned and fits in a 32bit register as it
				;         converts the string into a decimal
				;receives: push the index number in bytes, then push a warning prompt
				;               for an invalid number, then push a warning prompt for a
				;               number that is too big, then push a prompt for a number,
				;               then push the address for the string used to get the number,
				;               then push the address of the array used to store the integer
				;returns: an integer in the given index in an array of numbers 
				;preconditions: none
				;registers changed: no registers are changed, but ebp, esi, ecx, eax, ebx,
				;                   edi, and edx are used and then restored
 00000152			readVal PROC
 00000152  55				push		ebp
 00000153  8B EC			mov			ebp, esp 
 00000155  60				pushad
					
					;get number as a string
 00000156				GetNumber:
						getString	[ebp+12], [ebp+16]
 00000156  52		     1		push			edx
 00000157  51		     1		push			ecx
 00000158  52		     2		push	edx
 00000159  8B 55 10	     2		mov		edx, [ebp+16]
 0000015C  E8 00000000 E     2		call		WriteString
 00000161  5A		     2		pop		edx
 00000162  8B 55 0C	     1		mov				edx, [ebp+12]
 00000165  B9 00000014	     1		mov				ecx, 20
 0000016A  E8 00000000 E     1		call				ReadString
 0000016F  59		     1		pop				ecx
 00000170  5A		     1		pop				edx
 00000171  83 F8 0A				cmp			eax, 10
 00000174  7D 38				jge			TooLarge
					
					
					;convert string to decimal number while validating
 00000176  8B C8			mov			ecx, eax	
 00000178  8B 75 0C			mov			esi, [ebp+12]
 0000017B  8B 7D 1C			mov			edi, [ebp+28]

 0000017E				loopChar:	
 0000017E  8B 5D 08				mov			ebx, [ebp+8]
 00000181  8B 04 1F				mov			eax, [ebx+edi]
 00000184  BB 0000000A				mov			ebx, 10
 00000189  F7 E3				mul			ebx
 0000018B  8B 5D 08				mov			ebx, [ebp+8]
 0000018E  89 04 1F				mov			[ebx+edi], eax
 00000191  B8 00000000				mov			eax, 0
 00000196  AC					lodsb
 00000197  83 E8 30				sub			eax, 48

 0000019A  83 F8 00				cmp			eax, 0
 0000019D  7C 25				jl			Invalid
 0000019F  83 F8 09				cmp			eax, 9
 000001A2  7F 20				jg			Invalid

 000001A4  8B 5D 08				mov			ebx, [ebp+8]
 000001A7  01 04 1F				add			[ebx+edi], eax
 000001AA  E2 D2				loop		loopChar
 000001AC  EB 2F			jmp			AllGood

 000001AE				TooLarge:
 000001AE  E8 00000000 E			call				CrLf
						displayString	[ebp+20]
 000001B3  52		     1		push	edx
 000001B4  8B 55 14	     1		mov		edx, [ebp+20]
 000001B7  E8 00000000 E     1		call		WriteString
 000001BC  5A		     1		pop		edx
 000001BD  E8 00000000 E			call				CrLf
 000001C2  EB 92				jmp				GetNumber

 000001C4				Invalid:
 000001C4  E8 00000000 E			call				CrLf
						displayString	[ebp+24]
 000001C9  52		     1		push	edx
 000001CA  8B 55 18	     1		mov		edx, [ebp+24]
 000001CD  E8 00000000 E     1		call		WriteString
 000001D2  5A		     1		pop		edx
 000001D3  E8 00000000 E			call				CrLf
 000001D8  E9 FFFFFF79				jmp				GetNumber
					
 000001DD				AllGood:
					
 000001DD  61				popad
 000001DE  5D				pop			ebp
 000001DF  C2 0018			ret			24
 000001E2			readVal ENDP



				;Procedure to calculate the sum and average of a passed in array of
				;          integers
				;receives: need to push the array of numbers, then the address of the
				;				sum, then the address of the average
				;returns: the average of the passed in numbers in [ebp+8] and the sum of the
				;         numbers in [ebp+12]
				;preconditions: none
				;registers changed: no registers are changed, but ebp, esi, ecx, eax, ebx,
				;                   and edx are used and then restored
 000001E2			calculate PROC
 000001E2  55				push		ebp
 000001E3  8B EC			mov			ebp, esp
 000001E5  60				pushad

 000001E6  8B 75 10			mov			esi, [ebp+16]
 000001E9  B8 00000000			mov			eax, 0
 000001EE  B9 0000000A			mov			ecx, 10
 000001F3				AddNums:
 000001F3  03 06				add			eax, [esi]
 000001F5  83 C6 04				add			esi, 4
 000001F8  E2 F9			loop		AddNums
 000001FA  8B 5D 0C			mov			ebx, [ebp+12]
 000001FD  89 03			mov			[ebx], eax
 000001FF  BB 0000000A			mov			ebx, 10
 00000204  BA 00000000			mov			edx, 0
 00000209  F7 F3			div			ebx
 0000020B  8B 5D 08			mov			ebx, [ebp+8]
 0000020E  89 03			mov			[ebx], eax
 00000210  61				popad
 00000211  5D				pop			ebp
 00000212  C2 000C			ret			12
 00000215			calculate ENDP




				;Procedure convert a decimal into a string and then print it using the
				;		displayString macro
				;receives: push an index value for the number (0 if not in array), 
				;               then push the address of the string, then push the
				;               address of the number/number array  
				;returns: nothing
				;preconditions: none
				;registers changed: no registers are changed, but ebp, edi, esi, ecx, eax,
				;                   ebx, and edx are used and then restored
 00000215			writeVal PROC
 00000215  55				push		ebp
 00000216  8B EC			mov			ebp, esp 
 00000218  60				pushad
					
					;convert string to decimal number while validating
 00000219  8B 7D 0C			mov			edi, [ebp+12]
 0000021C  8B 75 0C			mov			esi, [ebp+12]
 0000021F  8B 4D 10			mov			ecx, [ebp+16]
 00000222  B8 00000004			mov			eax, 4
 00000227  F7 E1			mul			ecx
 00000229  8B C8			mov			ecx, eax				;index (in bytes) of current number working with
					
 0000022B  BB 05F5E100			mov			ebx, 100000000
 00000230  53				push		ebx
 00000231  8B 5D 08			mov			ebx, [ebp+8]
 00000234  8B 04 19			mov			eax, [ebx+ecx]		;mov number into eax
 00000237  5B				pop			ebx
 00000238				LoopDigits:	
 00000238  BA 00000000				mov			edx, 0
 0000023D  F7 F3				div			ebx
 0000023F  3B FE				cmp			edi, esi			;check if first number is added
 00000241  75 05				jne			AddNum
 00000243  83 F8 00				cmp			eax, 0				;haven't added first number so see if we found it yet
 00000246  74 03				je			SmallNum
						
 00000248					AddNum:							;found a number
 00000248  04 30					add			al, 48
 0000024A  AA						stosb							;move the digit into the string

 0000024B					SmallNum:
 0000024B  52						push		edx
 0000024C  8B C3					mov			eax, ebx
 0000024E  BB 0000000A					mov			ebx, 10
 00000253  BA 00000000					mov			edx, 0
 00000258  F7 F3					div			ebx
 0000025A  8B D8					mov			ebx, eax
 0000025C  58						pop			eax
 0000025D  83 FB 00					cmp			ebx, 0
 00000260  7F D6					jg			LoopDigits
						
 00000262  3B FE				cmp			edi, esi
 00000264  75 03				jne			AddNull
 00000266  B0 30				mov		al, 48
 00000268  AA					stosb
						
 00000269					AddNull:
 00000269  B0 00					mov			al, 0
 0000026B  AA						stosb
					
					displayString	[ebp+12]	
 0000026C  52		     1		push	edx
 0000026D  8B 55 0C	     1		mov		edx, [ebp+12]
 00000270  E8 00000000 E     1		call		WriteString
 00000275  5A		     1		pop		edx
 00000276  61				popad
 00000277  5D				pop			ebp
 00000278  C2 000C			ret			12
 0000027B			writeVal ENDP

				END main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    06/07/15 19:53:25
,Average of Ten    (Prog7_Average_of_Ten.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001E9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000027B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calculate  . . . . . . . . . . .	P Near	 000001E2 _TEXT	Length= 00000033 Public STDCALL
  AddNums  . . . . . . . . . . .	L Near	 000001F3 _TEXT	
introduction . . . . . . . . . .	P Near	 00000105 _TEXT	Length= 0000004D Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000105 Public STDCALL
  getData  . . . . . . . . . . .	L Near	 0000001E _TEXT	
  showNums . . . . . . . . . . .	L Near	 0000007C _TEXT	
  NoComma  . . . . . . . . . . .	L Near	 000000A4 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 00000152 _TEXT	Length= 00000090 Public STDCALL
  GetNumber  . . . . . . . . . .	L Near	 00000156 _TEXT	
  loopChar . . . . . . . . . . .	L Near	 0000017E _TEXT	
  TooLarge . . . . . . . . . . .	L Near	 000001AE _TEXT	
  Invalid  . . . . . . . . . . .	L Near	 000001C4 _TEXT	
  AllGood  . . . . . . . . . . .	L Near	 000001DD _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeVal . . . . . . . . . . . .	P Near	 00000215 _TEXT	Length= 00000066 Public STDCALL
  LoopDigits . . . . . . . . . .	L Near	 00000238 _TEXT	
  AddNum . . . . . . . . . . . .	L Near	 00000248 _TEXT	
  SmallNum . . . . . . . . . . .	L Near	 0000024B _TEXT	
  AddNull  . . . . . . . . . . .	L Near	 00000269 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
aveString  . . . . . . . . . . .	Byte	 000001C2 _DATA	
average  . . . . . . . . . . . .	DWord	 000001AD _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
commas . . . . . . . . . . . . .	Byte	 000001E6 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000033 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000007B _DATA	
intro3 . . . . . . . . . . . . .	Byte	 000000BD _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
myName . . . . . . . . . . . . .	Byte	 00000177 _DATA	
numDisplay . . . . . . . . . . .	Byte	 000001D3 _DATA	
numbers  . . . . . . . . . . . .	DWord	 0000000B _DATA	
promptNums . . . . . . . . . . .	Byte	 000000E9 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stringNum  . . . . . . . . . . .	Byte	 00000000 _DATA	
sumString  . . . . . . . . . . .	Byte	 000001B5 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000001B1 _DATA	
tooBig . . . . . . . . . . . . .	Byte	 00000138 _DATA	
warning  . . . . . . . . . . . .	Byte	 00000112 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
